-- TIME PERIOD
SELECT MIN(invoicedate) as start,
	   MAX(invoicedate) as end
FROM sales_data;

-- COUNTRIES
SELECT COUNT(*)
FROM sales_data
WHERE country = 'Unspecified' OR country = 'European Community';

-- COUNT DISTINCT ITEMS SOLD
SELECT COUNT(DISTINCT stockcode)
FROM sales_data;

-- [2.1] YEARLY ANALYSIS
-- DETERMINE TOTAL PROFIT, TOTAL LOSS, RELATIVE LOSS

SELECT
	SUM(CASE WHEN invoiceno !~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS revenue,
    SUM(CASE WHEN invoiceno ~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS loss,
	ROUND(ABS((SUM(CASE WHEN invoiceno ~ '^C\d' THEN quantity * unitprice ELSE 0 END) * 100))
             / SUM(CASE WHEN invoiceno !~ '^C\d' THEN quantity * unitprice ELSE 0 END),2) AS relative_loss_pctg
FROM sales_data;

-- MOST SOLD ARTICLE THROUGHOUT THE YEAR
SELECT description, COUNT(description)
FROM sales_data
WHERE invoiceno !~ '^C\d'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- REVENUE GENERATED BY THIS ITEMS
SELECT SUM(quantity*unitprice)
FROM sales_data
WHERE description = 'REGENCY CAKESTAND 3 TIER' AND invoiceno !~ '^C\d';

-- MOST REVENUE-GENERATING ARTICLE THROUGHOUT THE YEAR

SELECT description, stockcode, SUM(quantity*unitprice)
FROM sales_data
WHERE invoiceno !~ '^C\d'
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 1;

-- COUNT DISTINCT CUSTOMERS
SELECT COUNT(DISTINCT customerid)
FROM sales_data;

-- COUNT TOTAL DISTINCT ORDERS
SELECT customerid, COUNT(DISTINCT invoiceno) AS order_count
FROM sales_data
WHERE customerid IS NOT NULL
GROUP BY customerid
ORDER BY order_count DESC;

-- EFFECTIVE AND CANCELLED ORDERS FOR customerid 12748.0
SELECT 
    COUNT(DISTINCT invoiceno) AS order_count,
    COUNT(DISTINCT CASE WHEN invoiceno !~ '^C\d' THEN invoiceno END) AS effective_orders,
    COUNT(DISTINCT CASE WHEN invoiceno ~ '^C\d' THEN invoiceno END) AS cancelled_orders
FROM sales_data
WHERE customerid = '12748.0';

-- REVENUE AND LOSSES FOR customerid 12748.0
SELECT
	SUM(CASE WHEN invoiceno !~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS effective,
    SUM(CASE WHEN invoiceno ~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS loss
FROM sales_data
WHERE customerid = '12748.0';

-- HIGHEST REVENUE GENERATING CUSTOMER
SELECT customerid, SUM(quantity*unitprice) AS sum
FROM sales_data
WHERE invoiceno !~ '^C\d'
GROUP BY customerid
ORDER BY SUM DESC;

-- PROPORTION
SELECT ROUND((190824.09 + 168472.50 +111179.03 + 79613.64 +77183.60)/
		SUM(quantity*unitprice),2)*100 AS pctg
FROM sales_data
WHERE invoiceno !~ '^C\d';

-- OBJECT MOST FREQUENTLY OUT OF STOCK
SELECT description, COUNT(description), SUM(quantity*unitprice)
FROM sales_data
WHERE invoiceno ~ '^C\d'
GROUP BY description
ORDER BY 2 DESC
LIMIT 1;

-- OBJECT GENERATING MOST LOSS
SELECT description, SUM(quantity*unitprice)
FROM sales_data
WHERE invoiceno ~ '^C\d'
GROUP BY description
ORDER BY 2 ASC
LIMIT 1;

-- [2.2] MONTHLY ANALYSIS
-- TOP MONTHLY ARTICLES
WITH count AS (
    SELECT 
        to_char(invoicedate, 'YYYY-MM') AS month,
        description,
        COUNT(description) AS count_sold
    FROM sales_data
    WHERE invoiceno !~ '^C\d'  -- Excluding invoice numbers that match the pattern
    GROUP BY to_char(invoicedate, 'YYYY-MM'), description
) 
SELECT month, description, count_sold
FROM (
    SELECT
        month,
        description,
        count_sold,
        RANK() OVER (PARTITION BY month ORDER BY count_sold DESC) AS rank
    FROM count
)
WHERE rank = 1;

-- MONTHLY PROFT, MONTHLY LOSS, DELTA
WITH profit AS (
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS value
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
), loss AS (
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS value
    FROM sales_data
    WHERE invoiceno ~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
) 
SELECT 
    profit.month, 
    profit.value AS profit_value, 
    loss.value AS missed_value,
    ROUND(ABS(loss.value * 100 / profit.value), 2) AS delta_pctg
FROM profit
LEFT JOIN loss
ON profit.month = loss.month
ORDER BY profit.month;

-- HIGHEST  AND LOWEST SALES AND LOSSES
(
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS total_sales,
           'Max_sales' AS type
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
    ORDER BY total_sales DESC
    LIMIT 1
) UNION ALL (
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS total_sales,
           'Min_sales' AS type
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
    ORDER BY total_sales ASC
    LIMIT 1
) UNION ALL (
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS total_sales,
           'Min_loss' AS type
    FROM sales_data
    WHERE invoiceno ~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
    ORDER BY total_sales DESC
    LIMIT 1
) UNION ALL (
    SELECT to_char(invoicedate, 'YYYY-MM') AS month,
           SUM(quantity * unitprice) AS total_sales,
           'Max_loss' AS type
    FROM sales_data
    WHERE invoiceno ~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM')
    ORDER BY total_sales ASC
    LIMIT 1
);

-- OBJECT MOST OFTEN OUT OF STOCK EACH MONTH AND LOSS CREATED
WITH count AS (
    SELECT 
        to_char(invoicedate, 'YYYY-MM') AS month,
        description,
        COUNT(description) AS count_sold,
		SUM(quantity*unitprice) AS value
    FROM sales_data
    WHERE invoiceno ~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM'), description
) 
SELECT month, description, count_sold, value
FROM (
    SELECT
        month,
        description,
        count_sold,
		value,
        RANK() OVER (PARTITION BY month ORDER BY count_sold DESC) AS rank
    FROM count
)
WHERE rank = 1;

-- OBJECT CREATING THE HIGHEST LOSS PER MONTH
WITH count AS (
    SELECT 
        to_char(invoicedate, 'YYYY-MM') AS month,
        description,
		SUM(quantity*unitprice) AS value
    FROM sales_data
    WHERE invoiceno ~ '^C\d'
    GROUP BY to_char(invoicedate, 'YYYY-MM'), description
) 
SELECT month, description, value
FROM (
    SELECT
        month,
        description,
		value,
        RANK() OVER (PARTITION BY month ORDER BY value ASC) AS rank
    FROM count
)
WHERE rank = 1;

-- [3] REGIONAL ANALYSIS
-- TOP FIVE COUNTRIES
SELECT country, SUM(quantity*unitprice) AS total_revenue
FROM sales_data
WHERE invoiceno !~ '^C\d'
GROUP BY country
ORDER BY 2 DESC
LIMIT 5;

-- MOST ORDERED ARTICLE FOR TOP FIVE
WITH country_sales AS (
    SELECT 
        country,
        SUM(quantity * unitprice) AS total_sales
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY country
), top_countries AS (
    SELECT country
    FROM country_sales
    ORDER BY total_sales DESC
    LIMIT 5
), 
item_sales AS (
    SELECT 
        sales_data.country,
        sales_data.description,
		SUM(sales_data.quantity * sales_data.unitprice) AS value,
        COUNT(sales_data.description) AS count_sold,
        RANK() OVER (PARTITION BY sales_data.country ORDER BY COUNT(sales_data.description) DESC) AS rank
    FROM sales_data
    JOIN top_countries ON sales_data.country = top_countries.country
    WHERE invoiceno !~ '^C\d'
    GROUP BY sales_data.country, sales_data.description
) SELECT country, description, count_sold, value
FROM item_sales
WHERE rank = 1
ORDER BY 3 DESC;

-- TOP 5 REVENUE GENERATING ARTICLES
-- MOST ORDERED ARTICLE FOR TOP FIVE
WITH country_sales AS (
    SELECT 
        country,
        SUM(quantity * unitprice) AS total_sales
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY country
), top_countries AS (
    SELECT country
    FROM country_sales
    ORDER BY total_sales DESC
    LIMIT 5
), 
item_sales AS (
    SELECT 
        sales_data.country,
        sales_data.description,
		SUM(sales_data.quantity * sales_data.unitprice) AS value,
        COUNT(sales_data.description) AS count_sold,
        RANK() OVER (PARTITION BY sales_data.country ORDER BY COUNT(sales_data.description) DESC) AS rank
    FROM sales_data
    JOIN top_countries ON sales_data.country = top_countries.country
    WHERE invoiceno !~ '^C\d'
    GROUP BY sales_data.country, sales_data.description
) SELECT country, description, count_sold, value
FROM item_sales
WHERE rank < 6
ORDER BY 1, 4 DESC, 3 DESC;

-- MOST VALUE GENERATING ARTICLE PER TOP FIVE
WITH country_sales AS (
    SELECT 
        country,
        SUM(quantity * unitprice) AS total_sales
    FROM sales_data
    WHERE invoiceno !~ '^C\d'
    GROUP BY country
), top_countries AS (
    SELECT country
    FROM country_sales
    ORDER BY total_sales DESC
    LIMIT 5
), 
item_sales AS (
    SELECT 
        sales_data.country,
        sales_data.description,
		SUM(sales_data.quantity * sales_data.unitprice) AS value,
        RANK() OVER (PARTITION BY sales_data.country ORDER BY SUM(sales_data.quantity * sales_data.unitprice) DESC) AS rank
    FROM sales_data
    JOIN top_countries ON sales_data.country = top_countries.country
    WHERE invoiceno !~ '^C\d'
    GROUP BY sales_data.country, sales_data.description
) SELECT country, description, value
FROM item_sales
WHERE rank = 1
ORDER BY 3 DESC;

-- PROFIT-LOSS EVOLUTION PER MONTH FOR TOP FIVE COUNTRIES
WITH monthly_sales AS (
    SELECT 
        to_char(invoicedate, 'YYYY-MM') AS month,
        country,
        SUM(CASE WHEN invoiceno !~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS revenue,
        SUM(CASE WHEN invoiceno ~ '^C\d' THEN quantity * unitprice ELSE 0 END) AS lost_revenue
    FROM sales_data
    GROUP BY month, country
), top_countries AS (
    SELECT country
    FROM monthly_sales
    GROUP BY country
    ORDER BY SUM(revenue) DESC
    LIMIT 5
)
SELECT 
    ms.month,
    ms.country,
    ms.revenue,
    ms.lost_revenue
    --(ms.revenue - ms.lost_revenue) AS net_revenue
   -- LAG(ms.revenue - ms.lost_revenue) OVER (PARTITION BY ms.country ORDER BY ms.month) AS previous_net_revenue,
   -- (ms.revenue - ms.lost_revenue) - LAG(ms.revenue - ms.lost_revenue) OVER (PARTITION BY ms.country ORDER BY ms.month) AS month_over_month_change
FROM monthly_sales ms
JOIN top_countries tc ON ms.country = tc.country
ORDER BY ms.country, ms.month;*

-- AMAZON FEES
SELECT country, SUM(quantity*unitprice) AS total_fees
FROM sales_data
WHERE description = 'AMAZON FEE'
GROUP BY country
ORDER BY 2 DESC;

-- AMAZON FEES AND CUSTOMER ID
SELECT customerid, unitprice
FROM sales_data
WHERE description = 'AMAZON FEE';